name: Build
permissions:
  contents: read

on:
  schedule:
    - cron: "45 0 * * *" # Run at 00:45 every day
  push:
    branches: ["**"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  detect-gpu:
    name: GPU Detection
    runs-on: ubuntu-latest
    outputs:
      cuda_available: ${{ steps.gpu.outputs.available }}
    steps:
    - name: Check for NVIDIA GPU
      id: gpu
      run: |
        if command -v nvidia-smi &> /dev/null && nvidia-smi &> /dev/null; then
          echo "available=true" >> $GITHUB_OUTPUT
          echo "Physical GPU detected"
        else
          echo "available=false" >> $GITHUB_OUTPUT
          echo "No physical GPU detected"
        fi

  cuda-build:
    name: CUDA Build (Primary Target)
    runs-on: ubuntu-latest
    needs: detect-gpu
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
      # NOTE: We intentionally use default checkout behavior:
      # - PR triggers: Check out the merge commit (tests PR + target branch compatibility)
      # - Push triggers: Check out the actual pushed commit
      # This ensures PRs are tested against the target branch state

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Setup CUDA Environment
      uses: ./.github/actions/setup-cuda
      with:
        cuda-version: '13.0.0'

    - name: Build CUDA Binary
      env:
        # CUDA environment variables are set by setup-cuda action
        CUDA_COMPUTE_CAP: "80"
      run: |
        echo "Building CUDA binary for production release"

        # Show environment for debugging
        echo "CUDA Environment:"
        echo "CUDA_HOME=$CUDA_HOME"
        echo "CUDA_PATH=$CUDA_PATH"
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        echo "PATH includes CUDA: $(echo $PATH | grep cuda || echo 'No CUDA in PATH')"
        nvcc --version 2>/dev/null || echo "nvcc not available"

        echo "Building CUDA backend with full development environment"
        # Build with verbose output to catch any compilation issues
        cargo build --release --features candle-cuda --verbose


