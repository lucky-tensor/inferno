name: Build
permissions:
  contents: read

on:
  schedule:
    - cron: "45 0 * * *" # Run at 00:45 every day
  push:
    branches: ["**"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

jobs:
  detect-gpu:
    name: GPU Detection
    runs-on: ubuntu-latest
    outputs:
      cuda_available: ${{ steps.gpu.outputs.available }}
    steps:
    - name: Check for NVIDIA GPU
      id: gpu
      run: |
        if command -v nvidia-smi &> /dev/null && nvidia-smi &> /dev/null; then
          echo "available=true" >> $GITHUB_OUTPUT
          echo "Physical GPU detected"
        else
          echo "available=false" >> $GITHUB_OUTPUT
          echo "No physical GPU detected"
        fi

  cuda-build:
    name: CUDA Build (Primary Target)
    runs-on: ubuntu-latest
    needs: detect-gpu
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
      # NOTE: We intentionally use default checkout behavior:
      # - PR triggers: Check out the merge commit (tests PR + target branch compatibility)
      # - Push triggers: Check out the actual pushed commit
      # This ensures PRs are tested against the target branch state

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Update dependencies for CUDA 13.0 support
      run: |
        echo "Updating dependencies to ensure cudarc 0.17.3+ for CUDA 13.0 support..."
        cargo update

    - name: Setup CUDA
      uses: Jimver/cuda-toolkit@v0.2.27
      with:
        cuda: '13.0.0'
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cudart-dev", "thrust", "nvrtc"]'

    - name: Install CUDA math libraries
      run: |
        echo "Installing CUDA math libraries..."
        # Update package list
        sudo apt-get update

        # Install cuBLAS and cuRAND from the full CUDA toolkit
        # Use the full cuda-toolkit-13-0 to get all libraries
        sudo apt-get install -y cuda-toolkit-13-0 || echo "Full toolkit install failed, trying individual components"

        # If full toolkit fails, try individual packages
        sudo apt-get install -y cuda-nvcc-13-0 cuda-cudart-13-0 cuda-cudart-dev-13-0 || true

        # Check what libraries are actually installed
        echo "=== Checking CUDA libraries ==="
        find /usr/local/cuda-13.0/lib64/ -name "*cublas*" -o -name "*curand*" -o -name "*nvrtc*" || echo "No CUDA 13.0 libraries found"

        # Try to find libraries in system locations
        find /usr/lib/x86_64-linux-gnu/ -name "*cublas*" -o -name "*curand*" 2>/dev/null || echo "No system CUDA libraries found"

    - name: Verify CUDA Installation
      run: |
        echo "CUDA Installation Verification:"
        nvcc --version
        echo "CUDA_HOME: $CUDA_HOME"
        echo "CUDA_PATH: $CUDA_PATH"
        ls -la $CUDA_PATH/lib64/ | head -10

    - name: Build CUDA Binary
      env:
        # CUDA environment variables (set by cuda-toolkit action)
        LD_LIBRARY_PATH: "${{ env.CUDA_PATH }}/lib64:/usr/lib/x86_64-linux-gnu:${{ env.LD_LIBRARY_PATH }}"
        LIBRARY_PATH: "${{ env.CUDA_PATH }}/lib64:/usr/lib/x86_64-linux-gnu:${{ env.LIBRARY_PATH }}"
        CUDA_COMPUTE_CAP: "80"
      run: |
        echo "Building CUDA binary for production release"

        # Show environment for debugging
        echo "CUDA Environment:"
        echo "CUDA_HOME=$CUDA_HOME"
        echo "CUDA_PATH=$CUDA_PATH"
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        echo "PATH includes CUDA: $(echo $PATH | grep cuda || echo 'No CUDA in PATH')"
        nvcc --version 2>/dev/null || echo "nvcc not available"

        echo "Building CUDA backend with full development environment"
        # Build with verbose output to catch any compilation issues
        cargo build --release --features candle-cuda --verbose


