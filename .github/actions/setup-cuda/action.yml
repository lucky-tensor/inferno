name: 'Setup CUDA Environment'
description: 'Install and configure CUDA toolkit with math libraries for Inferno builds'
author: 'Inferno Team'

inputs:
  cuda-version:
    description: 'CUDA version to install'
    required: false
    default: '13.0.0'
  compute-capability:
    description: 'CUDA compute capability for compilation'
    required: false
    default: '80'
  install-math-libs:
    description: 'Whether to install CUDA math libraries (cuBLAS, cuRAND)'
    required: false
    default: 'true'

outputs:
  cuda-path:
    description: 'Path to CUDA installation'
    value: ${{ steps.setup.outputs.cuda-path }}
  cuda-version:
    description: 'Installed CUDA version'
    value: ${{ steps.setup.outputs.cuda-version }}
  libraries-found:
    description: 'CUDA libraries found and available'
    value: ${{ steps.verify.outputs.libraries-found }}

runs:
  using: 'composite'
  steps:
    - name: Update dependencies for CUDA support
      shell: bash
      run: |
        echo "Updating dependencies to ensure cudarc 0.17.3+ for CUDA ${{ inputs.cuda-version }} support..."
        cargo update

    - name: Setup CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.27
      with:
        cuda: ${{ inputs.cuda-version }}
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cudart-dev", "thrust", "nvrtc"]'

    - name: Install CUDA math libraries
      if: inputs.install-math-libs == 'true'
      shell: bash
      run: |
        echo "Installing CUDA math libraries..."
        # Update package list
        sudo apt-get update

        # Install cuBLAS and cuRAND from the full CUDA toolkit
        # Use the full cuda-toolkit to get all libraries
        CUDA_PKG_VERSION=$(echo "${{ inputs.cuda-version }}" | sed 's/\./-/g')
        echo "Installing cuda-toolkit-${CUDA_PKG_VERSION}..."
        sudo apt-get install -y cuda-toolkit-${CUDA_PKG_VERSION} || echo "Full toolkit install failed, trying individual components"

        # If full toolkit fails, try individual packages
        sudo apt-get install -y cuda-nvcc-${CUDA_PKG_VERSION} cuda-cudart-${CUDA_PKG_VERSION} cuda-cudart-dev-${CUDA_PKG_VERSION} || true

    - name: Verify CUDA Installation
      id: verify
      shell: bash
      run: |
        echo "CUDA Installation Verification:"
        nvcc --version
        echo "CUDA_HOME: $CUDA_HOME"
        echo "CUDA_PATH: $CUDA_PATH"

        # List CUDA libraries
        echo "=== CUDA Libraries in $CUDA_PATH/lib64/ ==="
        ls -la $CUDA_PATH/lib64/ | head -10

        # Find and report CUDA math libraries
        echo "=== Checking for CUDA math libraries ==="
        CUDA_LIBS=""
        if find /usr/local/cuda-${{ inputs.cuda-version }}/lib64/ -name "*cublas*" 2>/dev/null | head -1; then
          CUDA_LIBS="${CUDA_LIBS}cuBLAS "
        fi
        if find /usr/local/cuda-${{ inputs.cuda-version }}/lib64/ -name "*curand*" 2>/dev/null | head -1; then
          CUDA_LIBS="${CUDA_LIBS}cuRAND "
        fi
        if find /usr/local/cuda-${{ inputs.cuda-version }}/lib64/ -name "*nvrtc*" 2>/dev/null | head -1; then
          CUDA_LIBS="${CUDA_LIBS}NVRTC "
        fi

        # Try system locations if not found
        if [ -z "$CUDA_LIBS" ]; then
          echo "Checking system locations..."
          if find /usr/lib/x86_64-linux-gnu/ -name "*cublas*" 2>/dev/null | head -1; then
            CUDA_LIBS="${CUDA_LIBS}cuBLAS(system) "
          fi
          if find /usr/lib/x86_64-linux-gnu/ -name "*curand*" 2>/dev/null | head -1; then
            CUDA_LIBS="${CUDA_LIBS}cuRAND(system) "
          fi
        fi

        echo "libraries-found=${CUDA_LIBS:-None}" >> $GITHUB_OUTPUT
        echo "Found CUDA libraries: ${CUDA_LIBS:-None}"

    - name: Set outputs
      id: setup
      shell: bash
      run: |
        echo "cuda-path=$CUDA_PATH" >> $GITHUB_OUTPUT
        echo "cuda-version=${{ inputs.cuda-version }}" >> $GITHUB_OUTPUT

    - name: Export environment variables
      shell: bash
      run: |
        # Export CUDA environment variables for subsequent steps
        echo "CUDA_COMPUTE_CAP=${{ inputs.compute-capability }}" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib64:/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "LIBRARY_PATH=${CUDA_PATH}/lib64:/usr/lib/x86_64-linux-gnu:${LIBRARY_PATH}" >> $GITHUB_ENV